@page "/Message"

@inject ILogger<Message> logger
@using System.ComponentModel.DataAnnotations;
@using DingoDataAccess.Models.Friends
@using DingoAuthentication.Encryption

@using DingoDataAccess.Timers

@inject IJSRuntime js

@inject IMessageHandler messageHandler
@inject IFriendHandler friendHandler

@inject IEncryptionClient<EncryptedDataModel, SignedKeyModel> encryptionClient
@inject IEncryptedClientStateHandler clientStateHandler
@inject IKeyAndBundleHandler<KeyBundleModel<SignedKeyModel>, SignedKeyModel> bundleHandler

@inject IAsyncTimer Timer

@using System.Threading;

@implements IDisposable
<style type="text/css">
    html, body {
        background-image: linear-gradient(135deg, rgb(255, 255, 255), rgb(240, 240, 240));
    }
</style>
<h1 class="flex">
    Message @(Friend?.DisplayName ?? "Loading...")<span style="color:grey;">#@(Friend?.UniqueIdentifier ?? 0000)</span>
</h1>
<!--style="height: 75vh; margin-bottom: 55px;"-->
<div @ref=ChatBox class="d-flex flex-column-reverse list-group-flush overflow-auto d-none d-md-flex" style="height: 85vh;" id="exmaple">
    @foreach (var item in Messages)
    {
        <div class="list-group-item list-group-item-action shadow-sm my-2">
            <div class="d-flex">
                <img src=@(item.AvatarIsFriends ? Friend.AvatarPath ?? "/Images/DefaultAvatar.webp" : (MyFriendInfo.AvatarPath ?? "/Images/DefaultAvatar.webp")) class="rounded-circle flex my-auto" height="40" width="40" />
                <div class="mx-1 flex-fill">
                    <div>
                        <span class="fw-bold">@item.DisplayName</span><span style="color: grey;">#@item.UniqueIdentifier</span>
                    </div>
                    <div>
                        <span style="color: darkgray;">@item.TimeSent</span>
                        @if (item.ShowSpinner)
                        {
                            <div class="spinner-border spinner-border-sm text-success mx-1" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        }
                        @if (item.ShowCheck)
                        {
                            <span class="oi oi-circle-check mx-1" title="Encrypted and Delivered" aria-hidden="true"></span>
                        }
                    </div>
                </div>
            </div>
            <ul class="list-group list-group-flush">
                @if (item.Message.Contains("<br>"))
                {
                    @foreach (var messageFragment in item.Message.Split("<br>"))
                    {
                        <li class="list-group-item text-wrap">
                            @messageFragment
                        </li>
                    }
                }
                else
                {
                    <li class="list-group-item text-wrap">
                        @item.Message
                    </li>
                }
            </ul>

        </div>
    }
</div>
<div @ref=ChatBox class="d-flex flex-column-reverse list-group-flush overflow-auto d-md-none" style="height: 68vh; margin-bottom: 55px;" id="exmaple">
    @foreach (var item in Messages)
    {
        <div class="list-group-item list-group-item-action shadow-sm my-2">
            <div class="d-flex">
                <img src=@(item.AvatarIsFriends ? Friend.AvatarPath ?? "/Images/DefaultAvatar.webp" : (MyFriendInfo.AvatarPath ?? "/Images/DefaultAvatar.webp")) class="rounded-circle flex my-auto" height="40" width="40" />
                <div class="mx-1 flex-fill">
                    <div>
                        <span class="fw-bold">@item.DisplayName</span><span style="color: grey;">#@item.UniqueIdentifier</span>
                    </div>
                    <div>
                        <span style="color: darkgray;">@item.TimeSent</span>
                        @if (item.ShowSpinner)
                        {
                            <div class="spinner-border spinner-border-sm text-success mx-1" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        }
                        @if (item.ShowCheck)
                        {
                            <span class="oi oi-circle-check mx-1" title="Encrypted and Delivered" aria-hidden="true"></span>
                        }
                    </div>
                </div>
            </div>
            <ul class="list-group list-group-flush">
                @if (item.Message.Contains("<br>"))
                {
                    @foreach (var messageFragment in item.Message.Split("<br>"))
                    {
                        <li class="list-group-item text-wrap">
                            @messageFragment
                        </li>
                    }
                }
                else
                {
                    <li class="list-group-item text-wrap">
                        @item.Message
                    </li>
                }
            </ul>
        </div>
    }
</div>
<div class="flex">
    <EditForm Model="@InputValue" OnValidSubmit=@Submit>
        <div class="input-group mb-3 d-none d-md-inline-flex">
            <InputText class="form-control" placeholder=@PlaceholderText aria-label="Message" @bind-Value=@InputValue.Value>

            </InputText>
            <!--
            <button class="btn btn-outline-secondary px-1" type="submit">
                <span class="oi oi-folder mx-1" title="Attach File" aria-hidden="true"></span>
            </button>
            <button class="btn btn-outline-secondary px-1" type="submit">
                <span class="oi oi-image mx-1" title="Attach Image" aria-hidden="true"></span>
            </button>
                -->
            <button class="btn btn-primary px-4" type="submit">
                <span class="oi oi-chat mx-1" title="Send Message" aria-hidden="true"></span>
            </button>
        </div>
    </EditForm>
</div>
<EditForm Model="@InputValue" OnValidSubmit=@Submit>
    <div class="input-group mb-3 d-md-none fixed-bottom" style="margin-left: 20px; margin-right: 20px; width: 90%;">
        <InputText class="form-control" placeholder=@PlaceholderText aria-label="Message" @bind-Value=@InputValue.Value>

        </InputText>
        <!--
        <button class="btn btn-outline-secondary px-1" type="submit">
            <span class="oi oi-folder mx-1" title="Attach File" aria-hidden="true"></span>
        </button>
        <button class="btn btn-outline-secondary px-1" type="submit">
            <span class="oi oi-image mx-1" title="Attach Image" aria-hidden="true"></span>
        </button>
            -->
        <button class="btn btn-primary px-4" type="submit">
            <span class="oi oi-chat mx-1" title="Send Message" aria-hidden="true"></span>
        </button>
    </div>
</EditForm>

@code {

    [CascadingParameter(Name = "MyFriendInfo")]
    protected IFriendModel MyFriendInfo { get; set; }

    [CascadingParameter(Name = "Id")]
    protected string Id { get; set; }

    [Parameter]
    public string FriendId { get; set; }

    public IFriendModel Friend { get; set; }

    List<IMessageModel> RawMessages = new();
    private List<MessageState> Messages = new();

    private ElementReference ChatBox;

    private string PlaceholderText => $"Message @ {Friend?.DisplayName ?? "Loading..."}#{Friend?.UniqueIdentifier ?? 0}";

    private FormModel InputValue = new();

    private bool BlockInput = false;

    private int RefreshPollingRate = 5_000;

    private object LockingObject = new object();
    private ManualResetEvent DeadmansLock = new(false);


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        // make sure we load the encryption state so we can communicate

        await LoadEncryptionClient();

        await LoadMessages();

        Timer.DeadmansLock = DeadmansLock;
        Timer.TimerLock = LockingObject;

        async void TimerCallback()
        {
            await LoadMessages();
            Timer.Start();
        }

        Timer.Interval = RefreshPollingRate;

        Timer.Elapsed(TimerCallback);

        Timer.AutoReset = false;

    }

    // ENCRYPTION METHODS

    private async Task LoadEncryptionClient()
    {
        // since we are chatting with this person we should already have a state stored to encrypt between us

        // get the encryption state for the person we are chatting with
        var state = await clientStateHandler.GetState(Id, FriendId);

        if (state != null)
        {
            encryptionClient.ImportState(state);
        }
        else
        {
            logger.LogError("Failed to get encryption state for {Id} for {FriendId}", Id, FriendId);
        }
    }

    private async Task SaveEncryptionState()
    {
        // export the local state to string
        string state = encryptionClient.ExportState();

        // ssave the string in the database
        await clientStateHandler.SetState(Id, FriendId, state);
    }

    private async Task SendMessage(string message)
    {
        // encrypt the message
        if (encryptionClient.TryEncrypt(message, out EncryptedDataModel encryptedData))
        {
            // serialize the message
            string serializedEncryptedData = Newtonsoft.Json.JsonConvert.SerializeObject(encryptedData);

            // send message over the wire

            MessageModel rawMessage = new()
            {
                SenderId = Id,
                Message = serializedEncryptedData,
                TimeSent = DateTime.UtcNow
            };

            await messageHandler.SendMessage(Id, FriendId, rawMessage);

            await SaveEncryptionState();
        }
        else
        {
            logger.LogError("Failed to encrypt message for {Id} to {FriendId}", Id, FriendId);
        }
    }

    private async Task ReceiveMessage(IMessageModel rawMessage)
    {
        try
        {
            EncryptedDataModel deserializedEncryptedMessage = Newtonsoft.Json.JsonConvert.DeserializeObject<EncryptedDataModel>(rawMessage.Message);
            if (encryptionClient.TryDecrypt(deserializedEncryptedMessage, out string decryptedString))
            {
                // check to see if the last message was from the other person, if it is combin this message with that one to avoid screen spamming
                if (Messages.Count >= 1 && Messages[0].DisplayName == Friend.DisplayName)
                {
                    Messages[0].Message += $"<br>{decryptedString}";
                }
                else
                {
                    Messages.Insert(
                        0,
                        new()
                        {
                            DisplayName = Friend.DisplayName,
                            ShowSpinner = false,
                            Message = decryptedString,
                            ShowCheck = false,
                            TimeSent = rawMessage.TimeSent,
                            UniqueIdentifier = Friend.UniqueIdentifier,
                            AvatarIsFriends = true
                        }
                    );
                }
                await SaveEncryptionState();
            }
        }
        catch (Exception e)
        {
            logger.LogError("Failed to receive message from {SenderId} Error: {Error}", rawMessage.SenderId, e);
        }
    }

    // END ENCRYPTION METHODS

    // UI METHODS
    private async Task ScrollToBottomOfChatbox()
    {
        await js.InvokeVoidAsync("scrollToBottom", ChatBox);
    }

    private async Task Submit()
    {
        if (BlockInput)
        {
            return;
        }

        BlockInput = true;

        if (string.IsNullOrEmpty(InputValue.Value))
        {
            BlockInput = false;
            return;
        }

        await Dingo.Helpers.Sleep(100);

        // create a object to keep track of the object and update the spinners as necessary
        var msgReference = new MessageState()
        {
            DisplayName = MyFriendInfo.DisplayName,
            ShowSpinner = true,
            Message = InputValue.Value,
            ShowCheck = false,
            TimeSent = DateTime.UtcNow,
            UniqueIdentifier = MyFriendInfo.UniqueIdentifier,
            AvatarIsFriends = false
        };

        // if the last message was sent by me then append this message to that instead of spamming the screen with my mesages
        if (Messages.Count >= 1 && Messages[0].DisplayName == MyFriendInfo.DisplayName)
        {
            Messages[0].Message += $"<br>{msgReference.Message}";
        }
        else
        {
            Messages.Insert(0, msgReference);
        }



        // show animation immediately even though we haven't sent the message yet
        await ScrollToBottomOfChatbox();

        await SendMessage(InputValue.Value);

        // update the spinners
        msgReference.ShowCheck = true;
        msgReference.ShowSpinner = false;

        logger.LogInformation("Message {Message}", InputValue.Value);

        InputValue.Value = "";

        BlockInput = false;
    }

    private async Task LoadMessages()
    {
        // this retrieves the messages for the person we are messaging, this also permenantly deletes those messages from the database, once the messages leave memory they are gone forever
        RawMessages = await messageHandler.GetMessages(Id, FriendId);

        await RedrawMessages();

        await ScrollToBottomOfChatbox();
    }

    private async Task RedrawMessages()
    {
        // make sure we have the friend model for this friend
        Friend ??= await friendHandler.GetFriend(FriendId);

        if (Friend is null)
        {
            return;
        }

        // draw the messages
        foreach (var item in RawMessages)
        {
            await ReceiveMessage(item);
        }

        RawMessages.Clear();

        await InvokeAsync(() => StateHasChanged());
    }

    // END UI METHODS

    public void Dispose()
    {
        DeadmansLock?.Set();
        Timer?.Stop();
        Timer?.Dispose();
    }

    // COUPLED CLASSES

    private class FormModel
    {
        public string Value { get; set; }
    }

    private class MessageState
    {
        public string DisplayName { get; set; }
        public short UniqueIdentifier { get; set; }
        public string Message { get; set; }
        public bool ShowSpinner { get; set; } = false;
        public bool ShowCheck { get; set; } = false;
        public DateTime TimeSent { get; set; }
        public bool AvatarIsFriends { get; set; } = false;
    }

    // END COUPLED CLASSES
}
