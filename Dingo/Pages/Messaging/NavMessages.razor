
@inject IMessageHandler messageHandler
@inject ILogger<NavMessages> logger
@inject IFriendHandler friendHandler

@using DingoDataAccess.Models.Friends

@if (TopLevel.Messages.Count == 0)
{
    <li class="nav-item px-3">
        <div class="rounded-1 align-self-center py-2" style="text-align: center; background-color: darkslateblue;">
            <span style="color: white; font-weight: bold;">
                @NoMessagesText
            </span>
        </div>
    </li>
}
else
{
    @foreach (var item in TopLevel.Messages)
    {
        <NavMessage Friend=@item OnClick=@RemoveMessage />
    }
}

@code {
    [CascadingParameter(Name = "Id")]
    protected string Id { get; set; }

    [CascadingParameter(Name = nameof(TopLevel))]
    public TopLevelObjects TopLevel { get; set; }

    private const string NoMessagesText = "ʕ•ᴥ•ʔ All Caught Up!";

    private async Task RemoveMessage(IFriendModel friend)
    {
        // this is invoked when a user clicks the notification in the nav bar
        // the user is automatically shown the message screen and views the waiting messages

        // remove the friend from the messages list
        TopLevel.Messages.Remove(friend);

        // remove them from the pushed notifications list
        await TopLevel.AlreadyPushedMessageIds.Remove(friend.Id);

        // update the UI
        await InvokeAsync(() => TopLevel.StateHasChanged());
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await TopLevel.GetMessages();
        }
        await base.OnAfterRenderAsync(firstRender);
    }
}
