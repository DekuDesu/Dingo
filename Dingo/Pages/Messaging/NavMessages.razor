
@inject IMessageHandler messageHandler
@inject ILogger<NavMessages> logger
@inject IFriendHandler friendHandler

@implements IDisposable

@using DingoDataAccess.Models.Friends

@if (Messages.Count == 0)
{
    <li class="nav-item px-3">
        <div class="rounded-1 align-self-center py-2" style="text-align: center; background-color: darkslateblue;">
            <span style="color: white; font-weight: bold;">
                @NoMessagesText
            </span>
        </div>
    </li>
}
else
{
    @foreach (var item in Messages)
    {
        <NavMessage Friend=@item OnClick=@RemoveMessage />
    }
}

@code {
    [CascadingParameter(Name = "Id")]
    protected string Id { get; set; }

    [CascadingParameter(Name = nameof(TopLevel))]
    public TopLevelObjects TopLevel { get; set; }

    private const string NoMessagesText = "ʕ•ᴥ•ʔ All Caught Up!";

    List<IFriendModel> Messages = new();

    private int MessagePollingRate = 15_000;

    System.Timers.Timer CheckForMessagesTimer = new();

    private async Task RemoveMessage(IFriendModel friend)
    {
        Messages.Remove(friend);

        TopLevel.AlreadyPushedMessageIds.Remove(friend.Id);

        await InvokeAsync(() => StateHasChanged());
    }

    private async Task LoadMessages()
    {
        if (TopLevel is null)
        {
            return;
        }
        List<IMessageModel> waitingMessages = await messageHandler.GetMessages(Id);

        if (waitingMessages is null)
        {
            Messages.Clear();
            return;
        }

        List<(string Id, DateTime TimeSent)> Ids = new();

        bool listChanged = false;

        foreach (var item in waitingMessages)
        {
            if (TopLevel.AlreadyPushedMessageIds.Contains(item.SenderId) is false)
            {
                TopLevel.AlreadyPushedMessageIds.Add(item.SenderId);

                Ids.Add((item.SenderId, item.TimeSent));

                listChanged = true;
            }
        }

        // if the list hasnt changed return
        if (listChanged is false)
        {
            return;
        }

        // remove the read messages
        foreach (var item in TopLevel.AlreadyPushedMessageIds)
        {
            var found = Messages.Where(x => x.Id == item).FirstOrDefault();
            if (found != default)
            {
                Messages.Remove(found);
            }
        }

        foreach (var item in Ids)
        {
            var friend = await friendHandler.GetFriend(item.Id);

            Messages.Add(friend);

            TopLevel.toasts.Add(new Data.GeneralModels.ToastModel()
            {
                Content = $"{friend.DisplayName}#{friend.UniqueIdentifier} sent you a message.",
                Title = $"New Message",
                Timeout = TimeSpan.FromSeconds(10),
                TimeSent = item.TimeSent
            });
        }

        await InvokeAsync(() => TopLevel?.StateHasChanged?.Invoke());
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        await LoadMessages();

        CheckForMessagesTimer.Elapsed += async (x, y) => await LoadMessages();
        CheckForMessagesTimer.Interval = MessagePollingRate;
        CheckForMessagesTimer.AutoReset = true;
        CheckForMessagesTimer.Start();
    }

    public void Dispose()
    {
        CheckForMessagesTimer?.Stop();
        CheckForMessagesTimer?.Close();
        CheckForMessagesTimer?.Dispose();
    }
}
