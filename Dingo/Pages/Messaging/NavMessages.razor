
@inject IMessageHandler messageHandler
@inject ILogger<NavMessages> logger
@inject IFriendHandler friendHandler

@implements IDisposable

@using DingoDataAccess.Models.Friends

@foreach (var item in Messages)
{
    <NavMessage Friend=@item />
}

@code {
    [CascadingParameter(Name = "Id")]
    protected string Id { get; set; }

    List<IFriendModel> Messages = new();

    private int MessagePollingRate = 15_000;

    System.Timers.Timer CheckForMessagesTimer = new();

    private async Task LoadMessages()
    {
        await Dingo.Helpers.Sleep(100);

        Messages.Clear();

        List<IMessageModel> waitingMessages = await messageHandler.GetMessages(Id);

        if (waitingMessages is null)
        {
            return;
        }

        foreach (var item in waitingMessages)
        {
            Messages.Add(await friendHandler.GetFriend(item.SenderId));
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        logger.LogInformation("Initialized Component {ComponentName} Params: {Param1}:{Param1Value}", nameof(NavMessages), nameof(Id), Id);

        await LoadMessages();

        CheckForMessagesTimer.Elapsed += async (x, y) => await LoadMessages();
        CheckForMessagesTimer.Interval = MessagePollingRate;
        CheckForMessagesTimer.AutoReset = true;
        CheckForMessagesTimer.Start();
    }

    public void Dispose()
    {
        CheckForMessagesTimer?.Stop();
        CheckForMessagesTimer?.Close();
        CheckForMessagesTimer?.Dispose();
    }
}
