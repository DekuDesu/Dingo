@using Dingo.Data.UserInfo

@inject NavigationManager NavManager
@inject ILogger<ChangeUsername> logger

@using DingoDataAccess.Models.Friends

@inject IFriendHandler friendHandler
@inject IFriendListHandler friendListHandler
@inject IDisplayNameHandler displayNameHander
@inject IValidator<DisplayNameModel> searchValidator

@inject IBundleProcessor bundleProcessor

<EditForm Context="User" @bind-model="displayName" OnValidSubmit="@Submit">
    <div class="">
        <InputText class="form-control my-2" @bind-Value=@displayName.DisplayName />
    </div>
    <div class="">
        @if (SearchTermValidationFailures is not null)
        {
            @foreach (var item in SearchTermValidationFailures)
            {
                <p class="alert-warning rounded border">@item.ErrorMessage</p>
            }
        }
    </div>
    <div style="text-align: center;">
        <button type="submit" class=@ButtonClass>
            <span class=@CheckClass role="status" aria-hidden="true" style=@CheckStyle></span>
            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true" style=@SpinnerStyle></span>
            @ButtonText
        </button>
    </div>
</EditForm>

@code
{

    [CascadingParameter(Name = "Id")]
    protected string Id { get; set; } = null;

    [CascadingParameter(Name = "MyFriendInfo")]
    protected IFriendModel MyFriendInfo { get; set; }

    // make sure we get the display name
    [CascadingParameter]
    protected Task<AuthenticationState> AuthStat { get; set; }

    [CascadingParameter(Name = nameof(TopLevel))]
    public TopLevelObjects TopLevel { get; set; }

    private string SpinnerStyle = "display: none";

    private string ButtonText = "Search";

    private string ButtonClass = "btn btn-primary px-4";

    private string CheckStyle = "display: none";

    private string CheckClass = "oi oi-check";

    private Random rng = new();

    private string[] NotFoundText = {
        "Not Found 	(╥﹏╥)",
        "ヽ(｀Д´)ﾉ Not Found",
        "(≧︿≦) Not Found",
        "ಡ_ಡ Not Found"
    };
    private string[] SearchingText = {
        "☉ ‿ ⚆ Searching",
        "Searching 	(ง ≖_≖)ง",
        "Searching (ʘ‿ʘ)",
        "(❍ᴥ❍ʋ) Searching"
    };
    private string[] SentText = {
        "(・3・) Request Sent",
        "Request Sent 	(ﾉ◕ヮ◕)ﾉ*:・ﾟ✧",
        "Request Sent 	(ﾉ☉ヮ⚆)ﾉ",
        "٩(^‿^)۶ Request Sent"
    };

    private enum ButtonState
    {
        normal,
        completed,
        failed
    }

    private DisplayNameModel displayName = new();

    private List<FluentValidation.Results.ValidationFailure> SearchTermValidationFailures;

    private void UpdateButton(string text, ButtonState state = ButtonState.normal, bool spinner = false)
    {
        SpinnerStyle = spinner ? "" : "display: none;";
        ButtonText = text ?? "Change";
        ButtonClass = state switch
        {
            ButtonState.failed => "btn btn-danger px-4",
            ButtonState.completed => "btn btn-success px-4",
            _ => "btn btn-primary px-4"
        };
        CheckStyle = state == ButtonState.completed ? "" : "display: none;";
        CheckClass = state switch
        {
            ButtonState.failed => "oi oi-x",
            _ => "oi oi-check"
        };
    }

    private async Task Submit()
    {
        SearchTermValidationFailures?.Clear();

        if (displayName is null)
        {
            displayName = new();
            displayName.MyFullDisplayName = $"{MyFriendInfo.DisplayName}#{MyFriendInfo.UniqueIdentifier}";
            return;
        }

        if (displayName.DisplayName is null)
        {
            return;
        }

        displayName.MyFullDisplayName = $"{MyFriendInfo.DisplayName}#{MyFriendInfo.UniqueIdentifier}";

        var validation = searchValidator.Validate(displayName);

        if (validation.IsValid)
        {
            // update the button to show that we are working on changing the name
            UpdateButton(SearchingText[rng.Next(0, SearchingText.Length)], ButtonState.normal, true);

            // names are hashed in the format name#1234 and name is trimmed and lowered before hash
            string displayNameFormatted = displayName.DisplayName;

            // remove the space between the hash and the display name if there is one
            if (DingoDataAccess.Helpers.TrySeperateDisplayName(ref displayNameFormatted, out var result))
            {
                displayNameFormatted = $"{result.DisplayName.Trim().ToLower()}#{result.UniqueIdentifier}";
            }

            string foundId = await displayNameHander.GetIdFromDisplayName(displayNameFormatted);

            if (foundId?.Length is null or 0)
            {
                // don't allow users to know that we instantly invalidated their request
                await Dingo.Helpers.Sleep(500);

                UpdateButton(NotFoundText[rng.Next(0, NotFoundText.Length)], ButtonState.failed, false);

                return;
            }

            // create and store our encryption budle so we can create a shared secret with that person
            await bundleProcessor.SendBundle(Id, foundId);

            await friendHandler.SendRequest(Id, foundId);

            // this is to make the user feel like the username has really been changed
            await Dingo.Helpers.Sleep(500);

            // update the GUI to reflect the completed process
            UpdateButton(SentText[rng.Next(0, SentText.Length)], ButtonState.completed, false);

            TopLevel.toasts.Add(new()
            {
                Title = "Friend Request Sent!",
                Content = $"Friend request sent to {displayName.DisplayName}",
                Timeout = TimeSpan.FromSeconds(10)
            });

            TopLevel.StateHasChanged?.Invoke();
        }
        else
        {
            SearchTermValidationFailures = validation.Errors;
            return;
        }
    }
}
