@using DingoDataAccess.Models.Friends

@inject ILogger<DisplayFriends> logger
@inject IFriendListHandler friendlistHandler
@inject IFriendHandler friendHandler


<table class="table table-striped border rounded table-hover">
    <tbody>
        @if (TopLevel?.Friends?.Count is null or 0)
        {
            <tr scope="row">
                <td class="d-flex justify-content-between">
                    <div class="flex-grow-1 mx-1" style="text-align: center;">
                        <span>@(NoFriendMessage[rng.Next(0, NoFriendMessage.Count)])</span>
                    </div>
                </td>
            </tr>
        }
        else
        {
            @foreach (var item in TopLevel.Friends)
            {
                <FriendEntry Friend=@item />
            }
        }
    </tbody>
</table>

@code {
    [Parameter]
    public string Id { get; set; }

    [CascadingParameter(Name = "TopLevel")]
    public TopLevelObjects TopLevel { get; set; }

    private Random rng = new();

    private List<string>
        NoFriendMessage = new()
        {
                "No Friends yet, add them above! ༼  ୧ ಠ ᴥ ಠ ༽ノ",
                "Welcome! Add some friends using the button above! (๑•́ ヮ •̀๑)",
                "Woohoo! Time to add some friends! ٩(^‿^)۶",
                "(✿◠‿◠) Add some friends above!",
                "ᕙ(`▽´)ᕗ Time to add my friends, yeah!",
                "※\\(^o^)/※ Friend Time! 	※\\(^o^)/※",
            };


    protected override async Task OnInitializedAsync()
    {
        await GetFriends();

        await base.OnInitializedAsync();

        await TopLevel.AddTimer(15_000, async () => await GetFriends(), nameof(DisplayFriends));
    }

    private async Task GetFriends()
    {
        TopLevel.Friends = await friendHandler.GetFriendList(Id);
    }
}
