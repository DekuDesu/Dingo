@using DingoDataAccess.Models.Friends

@inject ILogger<DisplayFriends> logger
@inject IFriendListHandler friendlistHandler
@inject IFriendHandler friendHandler

@implements IDisposable

<table class="table table-striped border rounded table-hover">
    <tbody>
        @foreach (var item in Friends)
        {
            <FriendEntry Id=@Id Friend=@item Friends=@Friends StateChangedCallback=@StateChangedCallback />
        }
    </tbody>
</table>

@code {
    [Parameter]
    public string Id { get; set; }

private List<IFriendModel> Friends { get; set; } = new();

private int RefreshPollingRate = 15_000;

private System.Timers.Timer RefreshTimer = new();

protected override async Task OnParametersSetAsync()
{

    await base.OnParametersSetAsync();
}

protected override async Task OnInitializedAsync()
{
    await GetFriends();

    await base.OnInitializedAsync();

    logger.LogInformation("Initialized Component {ComponentName} Params: {Param1}:{Param1Value}", nameof(DisplayFriends), nameof(Id), Id);

    RefreshTimer.Interval = RefreshPollingRate;
    RefreshTimer.AutoReset = true;
    RefreshTimer.Elapsed += async (x, y) => await GetFriends();
    RefreshTimer.Start();
}

private async Task GetFriends()
{
    Friends = await friendHandler.GetFriendList(Id);
    await InvokeAsync(() => StateHasChanged());
}

private void StateChangedCallback()
{
    StateHasChanged();
}

public void Dispose()
{
    RefreshTimer?.Stop();
    RefreshTimer?.Close();
    RefreshTimer?.Dispose();
}
}
