@using DingoDataAccess.Models.Friends

@inject ILogger<DisplayFriends> logger
@inject IFriendListHandler friendlistHandler
@inject IFriendHandler friendHandler

@implements IDisposable

<table class="table table-striped border rounded table-hover">
    <tbody>
        @if (Friends.Count == 0)
        {
            <tr scope="row">
                <td class="d-flex justify-content-between">
                    <div class="flex-grow-1 mx-1" style="text-align: center;">
                        <span>@(NoFriendMessage[rng.Next(0, NoFriendMessage.Count)])</span>
                    </div>
                </td>
            </tr>
        }
        else
        {
            @foreach (var item in Friends)
            {
                <FriendEntry Id=@Id Friend=@item Friends=@Friends StateChangedCallback=@StateChangedCallback />
            }
        }
    </tbody>
</table>

@code {
    [Parameter]
    public string Id { get; set; }

    private List<IFriendModel> Friends { get; set; } = new();

    private int RefreshPollingRate = 15_000;

    private Random rng = new();

    private List<string> NoFriendMessage = new()
    {
            "No Friends yet, add them above! ༼  ୧ ಠ ᴥ ಠ ༽ノ",
            "Welcome! Add some friends using the button above! (๑•́ ヮ •̀๑)",
            "Woohoo! Time to add some friends! ٩(^‿^)۶",
            "(✿◠‿◠) Add some friends above!",
            "ᕙ(`▽´)ᕗ Time to add my friends, yeah!",
            "※\\(^o^)/※ Friend Time! 	※\\(^o^)/※",
        };

    private System.Timers.Timer RefreshTimer = new();

    protected override async Task OnParametersSetAsync()
    {

        await base.OnParametersSetAsync();
    }

    protected override async Task OnInitializedAsync()
    {
        await GetFriends();

        await base.OnInitializedAsync();

        logger.LogInformation("Initialized Component {ComponentName} Params: {Param1}:{Param1Value}", nameof(DisplayFriends), nameof(Id), Id);

        RefreshTimer.Interval = RefreshPollingRate;
        RefreshTimer.AutoReset = true;
        RefreshTimer.Elapsed += async (x, y) => await GetFriends();
        RefreshTimer.Start();
    }

    private async Task GetFriends()
    {
        Friends = await friendHandler.GetFriendList(Id);
        await InvokeAsync(() => StateHasChanged());
    }

    private void StateChangedCallback()
    {
        StateHasChanged();
    }

    public void Dispose()
    {
        RefreshTimer?.Stop();
        RefreshTimer?.Close();
        RefreshTimer?.Dispose();
    }
}
