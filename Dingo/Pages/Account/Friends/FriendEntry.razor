
@inject ILogger<FriendEntry> logger
@inject IFriendHandler friendHandler
@using DingoDataAccess.Models.Friends
@using Dingo.Data.GeneralModels
@using DingoDataAccess.Enums

@using DingoAuthentication.Encryption

@inject IEncryptedClientStateHandler clientStateHandler

<tr scope="row">
    <td class="d-flex justify-content-between">
        <div class="mx-1 align-self-center">
            <img src=@Friend.AvatarPath class="img-fluid rounded-circle " style="width: 64px; height: 64px;" />
        </div>
        <div class="flex-grow-1 mx-1">
            <div>
                <span class="oi oi-media-record" title=@GetStatusName() aria-hidden="true" style=@GetColor()></span>
                <span style="color: black; font-weight:bold; font-size: large;">
                    @(Friend?.DisplayName ?? "Loading")
                    <span style="color: grey; font-size: 1em;">
                        #@(Friend?.UniqueIdentifier.ToString() ?? "")
                    </span>
                </span>
            </div>
            <div>
                <div class="d-inline">
                    <small>@GetStatusName()</small>
                </div>
                <button class="d-inline btn btn-outline-primary mx-4" @onclick=MessageFriend>
                    <span class="oi oi-chat" title="Message" aria-hidden="true"></span>
                </button>
            </div>
        </div>
        <div class="d-inline dropdown align-self-center" style="text-align: right;">
            <a class="btn btn-primary dropdown-toggle" role="button" id="dropdownMenuLink" aria-expanded="false" @onclick=@ToggleShowDropdown>
                <span class="oi oi-cog d-none d-sm-inline" title="Friend Options" aria-hidden="true"></span>
            </a>

            <ul class=@DropDownStyle aria-labelledby="dropdownMenuLink">
                <li><a class="dropdown-item" @onclick=@RemoveWithModal>Remove</a></li>
                <li><a class="dropdown-item" @onclick=@ReportWithModal>Report</a></li>
            </ul>
        </div>
    </td>
</tr>
@if (ShowRemoveModal)
{
    <Dingo.Pages.Components.Modal Title=@RemoveModalTitle Content=@RemoveModalContent SubmitText="Yes" CancelText="No" CancelCallback=@ModalCancel SubmitCallback=@Remove></Dingo.Pages.Components.Modal>
}
@if (ShowReportModal)
{
    <Dingo.Pages.Components.Modal Title=@ReportModalTitle Content=@ReportModalContent SubmitText="Report" CancelText="Cancel" CancelCallback=@ModalCancel SubmitCallback=@Report></Dingo.Pages.Components.Modal>
}
@code {
    [CascadingParameter(Name = nameof(TopLevel))]
    protected TopLevelObjects TopLevel { get; set; }

    [CascadingParameter(Name = "Id")]
    public string Id { get; set; }

    [Parameter]
    public IFriendModel Friend { get; set; }

    private bool ShowRemoveModal = false;
    private bool ShowReportModal = false;

    private bool ShowSettings = false;

    private void ToggleShowSettings() => ShowSettings = !ShowSettings;

    private void ToggleShowDropdown() => ShowDropDown = !ShowDropDown;

    private string DropDownStyle => ShowDropDown ? "dropdown-menu show end-0" : "dropdown-menu";

    private bool ShowDropDown = false;

    private bool blockInput = false;

    private string ReportModalTitle => $"Report {Friend.DisplayName}#{Friend.UniqueIdentifier}?";
    private string ReportModalContent => $"This will notify Dingo that this person should be investigated for bad behaviour. Your messages are always forgotten by Dingo, we will not be able to investigate past messages.";

    private string RemoveModalTitle => $"Remove {Friend.DisplayName}#{Friend.UniqueIdentifier}?";
    private string RemoveModalContent => $"Are you sure you want to remove them from your friends list?";

    private void MessageFriend()
    {
        TopLevel.CurrentChatId = Friend.Id;

        TopLevel.ShowChatInterface = true;

        TopLevel.StateHasChanged();
    }

    private string GetStatusName()
    {
        // check to see if the user is offline
        if (Friend.Status is OnlineStatus.Offline)
        {
            return "Offline";
        }

        // if the user isn't offline then show their selected status
        return Friend.VirtualStatus switch
        {
            OnlineStatus.Offline => "Offline",
            OnlineStatus.Online => "Online",
            OnlineStatus.Busy => "Busy",
            OnlineStatus.Invisible => "Offline",
            OnlineStatus.LookingToChat => "Looking To Chat",
            OnlineStatus.DoNotDisturb => "Do Not Disturb",
            _ => "Offline"
        };
    }

    private string GetColor()
    {
        return Friend.VirtualStatus switch
        {
            OnlineStatus.Offline => "color: grey;",
            OnlineStatus.Online => "color: green;",
            OnlineStatus.Busy => "color: orange;",
            OnlineStatus.Invisible => "color: grey;",
            OnlineStatus.LookingToChat => "color: blue;",
            OnlineStatus.DoNotDisturb => "color: red;",
            _ => "color: grey;"
        };
    }

    private void RemoveWithModal()
    {
        ShowRemoveModal = true;

        ToggleShowDropdown();
    }

    private void ReportWithModal()
    {
        ShowReportModal = true;

        ToggleShowDropdown();
    }

    private async Task ModalCancel()
    {
        ShowRemoveModal = false;

        ShowReportModal = false;

        await Dingo.Helpers.Sleep(100);

        blockInput = false;
    }

    private async Task Report()
    {
        if (blockInput)
        {
            return;
        }
        blockInput = true;

        await Dingo.Helpers.Sleep(100);

        TopLevel.toasts.Add(new()
        {
            Title = "Report Submitted",
            Content = "Your report has successfully been submitted! Thank you for keeping our community safe!",
            TimeSent = DateTime.UtcNow
        });

        TopLevel.StateHasChanged?.Invoke();

        blockInput = false;
    }

    private async Task Remove()
    {
        if (blockInput)
        {
            return;
        }

        blockInput = true;

        // delete any keys that they have for each other
        await clientStateHandler.DeleteState(Id, Friend.Id);

        await clientStateHandler.DeleteState(Friend.Id, Id);

        // remove them from the friends list in the database
        await friendHandler.RemoveFriend(Id, Friend.Id);

        await friendHandler.RemoveFriend(Friend.Id, Id);

        ShowRemoveModal = false;

        TopLevel.Friends.Remove(Friend);

        // push notification to UI to show user that process suceeded
        ShowRemovedFriendToast();

        // update UI
        TopLevel.StateHasChanged();

        blockInput = false;
    }

    private void ShowRemovedFriendToast()
    {
        TopLevel.toasts.Add(new()
        {
            Title = "Removed Friend",
            Timeout = TimeSpan.FromSeconds(10),
            Content = $"Removed {Friend.DisplayName}#{Friend.UniqueIdentifier} from friends list."
        });
    }
}
