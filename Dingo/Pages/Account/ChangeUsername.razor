@using Data.GeneralModels

@inject ILogger<ChangeUsername> logger

@inject NavigationManager NavManager
@using DingoDataAccess.Models.Friends
@inject IDisplayNameHandler nameHandler
@inject IFriendHandler friendHandler

<div class=@ModelClass tabindex="-1" aria-hidden="true" style=@ModalStyle>
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@Title</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick=@Cancel></button>
            </div>
            <div class="modal-body" style="text-align: center;">
                <EditForm Context="User" @bind-model="newUsername" OnValidSubmit="@UpdateUsername">
                    <InputText class="form-control my-2" @bind-Value=@newUsername.Term />
                </EditForm>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" @onclick=@Cancel>@CancelText</button>
                <button type="button" class=@ButtonClass @onclick=@Submit>
                    <span class="oi oi-check" role="status" aria-hidden="true" style=@CheckStyle></span>
                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true" style=@SpinnerStyle></span>
                    @ButtonText
                </button>
            </div>
        </div>
    </div>
</div>

@code {

    [CascadingParameter(Name = "Id")]
    public string Id { get; set; }

    [CascadingParameter(Name = "MyFriendInfo")]
    public IFriendModel MyFriendInfo { get; set; }

    [CascadingParameter(Name = "TopLevel")]
    public TopLevelObjects TopLevel { get; set; }

    [CascadingParameter(Name = "DisplayName")]
    public string DisplayName { get; set; } = null;

    private SingleSearchTermModel newUsername = new();

    public string Title { get; set; } = "Change Display Name";

    public string CancelText { get; set; } = "Cancel";

    public string SubmitText { get; set; } = "Save";

    private string ModelClass => TopLevel.ShowChangeDisplayName ? "modal fade show" : "modal fade";
    private string ModalStyle => TopLevel.ShowChangeDisplayName ? "display: unset;" : "display: none;";

    private bool blockInput = false;

    private void Cancel()
    {
        if (blockInput)
        {
            return;
        }

        blockInput = true;

        TopLevel.ShowChangeDisplayName = false;

        blockInput = false;
    }


    private async Task Submit()
    {
        if (blockInput)
        {
            return;
        }

        blockInput = true;

        await UpdateUsername();

        TopLevel.ShowChangeDisplayName = false;

        TopLevel.StateHasChanged();

        blockInput = false;
    }

    private string SpinnerStyle = "display: none";
    private string ButtonText = "Change";
    private string ButtonClass = "btn btn-primary";
    private string CheckStyle = "display: none";

    private void UpdateButton(string text, bool complete, bool spinner)
    {
        SpinnerStyle = spinner ? "" : "display: none;";
        ButtonText = text ?? "Change";
        ButtonClass = complete ? "btn btn-success" : "btn btn-primary";
        CheckStyle = complete ? "" : "display: none;";
    }

    private async Task UpdateUsername()
    {
        // make sure the name isnt empty
        if (string.IsNullOrEmpty(newUsername.Term))
        {
            return;
        }

        if (string.IsNullOrWhiteSpace(newUsername.Term))
        {
            return;
        }

        // make sure it's not the same name
        if (newUsername.Term == DisplayName)
        {
            return;
        }

        // update the button to show that we are working on changing the name
        UpdateButton("Changing", false, true);

        // logg the information
        logger.LogInformation("Changing username for {Id} to: {NewUsername}", Id, newUsername.Term);

        // set / update the name, this uses parameterized procedures and rewplaces ; and ' limiting sql injection opportunities
        if (await nameHandler.SetDisplayName(Id, newUsername.Term))
        {
            // get my friend info again
            MyFriendInfo = await friendHandler.GetFriend(Id);

            TopLevel.StateHasChanged();

            // update the field so we cant change the name multiple times to the same thing
            DisplayName = newUsername.Term;

            // this is to make the user feel like the username has really been changed
            await Task.Run(() => System.Threading.Thread.Sleep(500));

            // update the GUI to reflect the completed process
            UpdateButton("Changed", true, false);

            // add a toast to notify user that display name has been changed!
            TopLevel.toasts.Add(new ToastModel()
            {
                Timeout = TimeSpan.FromSeconds(5),
                Content = $"Display name sucessfully changed to {DisplayName} ٩(^‿^)۶",
                Title = "Success!"
            });
        }
        else
        {
            // add a toast to notify user that something went wrong =(
            TopLevel.toasts.Add(new ToastModel()
            {
                Timeout = TimeSpan.FromSeconds(5),
                Content = $"Something went wrong changing your display name, try again later. ಥᴥಥ",
                Title = "Ruh Roh!"
            });
        }

        TopLevel.StateHasChanged();
    }
}
