@using DingoDataAccess.Models.Friends

@inject ILogger<ViewRequests> logger
@inject IFriendListHandler friendlistHandler
@inject IFriendHandler friendHandler

@implements IDisposable

<table class="table table-striped border rounded table-hover">
    <tbody>
        @foreach (var item in Requests)
        {
            <Dingo.Pages.Account.Requests.RequestEntry Id=@Id friend=@item Requests=@Requests StateHasChangedCallback=@StateHasChangedCallback />
        }
    </tbody>
</table>

@code {
    [Parameter]
    public string Id { get; set; }

    private List<IFriendModel> Requests { get; set; } = new();

    private int RefreshPollingRate = 15_000;

    private System.Timers.Timer RefreshTimer = new();

    protected override async Task OnInitializedAsync()
    {
        await GetRequests();

        await base.OnInitializedAsync();

        logger.LogInformation("Initialized Component {ComponentName} Params: {Param1}:{Param1Value}", nameof(ViewRequests), nameof(Id), Id);

        RefreshTimer.Elapsed += async (x, y) => await GetRequests();
        RefreshTimer.Interval = RefreshPollingRate;
        RefreshTimer.AutoReset = true;
        RefreshTimer.Start();
    }

    private async Task GetRequests()
    {
        logger.LogInformation("Fetching request list for {Id}", Id);

        Requests = await friendHandler.GetRequests(Id);

        await InvokeAsync(() => StateHasChanged());
    }

    private void StateHasChangedCallback()
    {
        StateHasChanged();
    }

    public void Dispose()
    {
        RefreshTimer?.Stop();
        RefreshTimer?.Close();
        RefreshTimer?.Dispose();
    }
}
