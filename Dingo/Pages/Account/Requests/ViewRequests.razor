@using DingoDataAccess.Models.Friends

@inject ILogger<ViewRequests> logger
@inject IFriendListHandler friendlistHandler
@inject IFriendHandler friendHandler

@implements IDisposable

<table class="table table-striped border rounded table-hover">
    <tbody>
        @if (TopLevel.FriendRequests.Count == 0)
        {
            <tr scope="row">
                <td class="d-flex justify-content-between">
                    <div class="flex-grow-1 mx-1" style="text-align: center;">
                        <span>@(NoRequestMessage[rng.Next(0, NoRequestMessage.Count)])</span>
                    </div>
                </td>
            </tr>
        }
        else
        {
            @foreach (var item in TopLevel.FriendRequests)
            {
                <Dingo.Pages.Account.Requests.RequestEntry Id=@Id friend=@item />
            }
        }
    </tbody>
</table>

@code {
    [Parameter]
    public string Id { get; set; }

    [CascadingParameter(Name = "TopLevel")]
    public TopLevelObjects TopLevel { get; set; }

    bool ShowToasts = true;

    private Random rng = new();

    private List<string> NoRequestMessage = new()
    {
            "No Pending Requests yet, try sending them one! ༼  ୧ ಠ ᴥ ಠ ༽ノ",
            "Friends coming soon! (๑•́ ヮ •̀๑)",
            "No Requests yet, but hopefully some soon! ٩(^‿^)۶",
            "(✿◠‿◠) None yet, send them one instead!",
            "ᕙ(`▽´)ᕗ None yet! Patience is strength!",
            "※\\(^o^)/※ Send a request above! ※\\(^o^)/※",
        };

    protected override async Task OnInitializedAsync()
    {
        await TopLevel?.GetFriendRequests?.Invoke();

        await base.OnInitializedAsync();
    }

    public void Dispose()
    {
        // when index is diposed it will dispose this timer automatically
        //TopLevel.RemoveTimer(nameof(ViewRequests)).Wait();
    }
}
