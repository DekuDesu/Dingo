@inject IFriendHandler friendHandler
@inject ILogger<RequestEntry> logger

@using DingoAuthentication.Encryption

@inject IKeyAndBundleHandler<KeyBundleModel<SignedKeyModel>, SignedKeyModel> bundleHandler
@inject IBundleProcessor bundleProcessor

@using DingoDataAccess.Models.Friends

<tr scope="row">
    <td class="d-flex">
        <div class="mx-1 align-self-center" style="min-width: 64px;">
            <img src=@(friend.AvatarPath ?? "/Images/DefaultAvatar.webp") class="img-fluid rounded-circle " style="width: 64px; height: 64px;" />
        </div>
        <div class="align-self-center flex-grow-1 mx-2">
            <span style="font-weight: bold;">
                @friend.DisplayName
            </span>
            <span style="font-weight: bold; color: grey;">
                #@friend.UniqueIdentifier.ToString()
            </span>
        </div>
        <div class="mx-1 d-block d-sm-block d-md-none align-self-center">
            <!-- SMOL SCREENS -->
            <div class="input-group align-self-center">
                <button class=@AcceptSmallClass title="Accept Friend Request" aria-hidden="true" style=@AcceptSmallStyle @onclick=@AcceptRequest @onmouseover=@(()=>ToggleHovering_Accept()) @onmouseout=@(()=>ToggleHovering_Accept())>
                    @if (ShowSpinner == 0)
                    {
                        <div class="spinner-border my-1 text-success" role="status" style="color: white;">
                            <span class="visually-hidden">Adding...</span>
                        </div>
                    }
                </button>
                <button class=@IgnoreSmallClass title="Ignore Request" aria-hidden="true" style=@IgnoreSmallStyle @onclick=@IgnoreRequest @onmouseover=@(()=>ToggleHovering_Ignore()) @onmouseout=@(()=>ToggleHovering_Ignore())>
                    @if (ShowSpinner == 1)
                    {
                        <div class="spinner-border my-1 text-secondary" role="status" style="color: white;">
                            <span class="visually-hidden">Ignoring...</span>
                        </div>
                    }
                </button>
                <button class=@BlockSmallClass title="Block User" aria-hidden="true" style=@BlockSmallStyle @onclick=@BlockRequest @onmouseover=@(()=>ToggleHovering_Block()) @onmouseout=@(()=>ToggleHovering_Block())>
                    @if (ShowSpinner == 2)
                    {
                        <div class="spinner-border my-1 text-danger" role="status" style="color: white;">
                            <span class="visually-hidden">Blocking...</span>
                        </div>
                    }
                </button>
            </div>
        </div>
        <div class="mx-3 d-none d-sm-none d-md-block align-self-center">
            <!-- LARGER SCREENS -->
            <div class="input-group align-self-center">
                <button class=@AcceptClass title="Accept Friend Request" aria-hidden="true" style=@AcceptStyle @onclick=@AcceptRequest @onmouseover=@(()=>ToggleHovering_Accept()) @onmouseout=@(()=>ToggleHovering_Accept())>
                    @if (ShowSpinner == 0)
                    {
                        <div class=@AcceptSpinnerClass role="status" style="color: white;">
                            <span class="visually-hidden">Adding...</span>
                        </div>
                    }
                </button>
                <button class=@IgnoreClass title="Ignore Request" aria-hidden="true" style=@IgnoreStyle @onclick=@IgnoreRequest @onmouseover=@(()=>ToggleHovering_Ignore()) @onmouseout=@(()=>ToggleHovering_Ignore())>
                    @if (ShowSpinner == 1)
                    {
                        <div class=@IgnoreSpinnerClass role="status" style="color: white;">
                            <span class="visually-hidden">Ignoring...</span>
                        </div>
                    }
                </button>
                <button class=@BlockClass title="Block User" aria-hidden="true" style=@BlockStyle @onclick=@BlockRequest @onmouseover=@(()=>ToggleHovering_Block()) @onmouseout=@(()=>ToggleHovering_Block())>
                    @if (ShowSpinner == 2)
                    {
                        <div class=@BlockSpinnerClass role="status" style="color: white;">
                            <span class="visually-hidden">Blocking...</span>
                        </div>
                    }
                </button>
            </div>
        </div>
    </td>
</tr>

@code {
    [Parameter]
    public string Id { get; set; }

    [Parameter]
    public IFriendModel friend { get; set; }

    [Parameter]
    public Action StateHasChangedCallback { get; set; }

    [CascadingParameter(Name = "TopLevel")]
    public TopLevelObjects TopLevel { get; set; }

    private string IconSize = "font-size: xx-large;";

    private string AcceptStyle => IconSize + AcceptColor;

    private string AcceptSmallStyle => IconSize + "color: green;";

    private string AcceptColor => hoveringAccept ? "color: white;" : "color: green;";

    private string AcceptClass => $"btn btn-outline-success {(ShowSpinner is 0 ? "" : "oi oi-circle-check")}";

    private string AcceptSmallClass => $"btn btn-link text-decoration-none {(ShowSpinner is 0 ? "" : "oi oi-circle-check")}";

    private string AcceptSpinnerClass => $"spinner-border my-1 {AcceptSpinnerColor}";

    private string AcceptSpinnerColor => hoveringAccept ? "text-light" : "text-success";

    private string IgnoreStyle => IconSize + IgnoreColor;

    private string IgnoreSmallStyle => IconSize + "color: grey;";

    private string IgnoreColor => hoveringIgnore ? "color: white;" : "color: black;";

    private string IgnoreClass => $"btn btn-outline-secondary {(ShowSpinner is 1 ? "" : "oi oi-circle-x")}";

    private string IgnoreSmallClass => $"btn btn-link text-decoration-none {(ShowSpinner is 1 ? "" : "oi oi-circle-x")}";

    private string IgnoreSpinnerClass => $"spinner-border my-1 {IgnoreSpinnerColor}";

    private string IgnoreSpinnerColor => hoveringIgnore ? "text-light" : "text-secondary";

    private string BlockStyle => IconSize + BlockColor;

    private string BlockSmallStyle => IconSize + "color: red;";

    private string BlockColor => hoveringBlock ? "color: white;" : "color: red;";

    private string BlockClass => $"btn btn-outline-danger {(ShowSpinner is 2 ? "" : "oi oi-ban")}";

    private string BlockSmallClass => $"btn btn-link text-decoration-none {(ShowSpinner is 2 ? "" : "oi oi-ban")}";

    private string BlockSpinnerClass => $"spinner-border my-1 {BlockSpinnerColor}";

    private string BlockSpinnerColor => hoveringBlock ? "text-light" : "text-danger";

    private bool BlockInput = false;

    private int ShowSpinner = -1;

    bool hoveringAccept = false;
    bool hoveringIgnore = false;
    bool hoveringBlock = false;

    private void ToggleHovering_Accept() => hoveringAccept = !hoveringAccept;
    private void ToggleHovering_Ignore() => hoveringIgnore = !hoveringIgnore;
    private void ToggleHovering_Block() => hoveringBlock = !hoveringBlock;

    private Task Wait()
    {
        return Task.Run(() => System.Threading.Thread.Sleep(500));
    }

    private void RemoveFromTopLevelList()
    {
        TopLevel.WaitingRequestIds.Remove(friend.Id);
    }

    private async Task AcceptRequest()
    {
        if (BlockInput)
        {
            return;
        }
        BlockInput = true;
        ShowSpinner = 0;

        await Wait();

        // create a shared secret and send our key bundle to the other party so we can chat
        await bundleProcessor.CreateSecretAndSendBundle(Id, friend.Id);

        // create secret for other party
        await bundleProcessor.CreateSecret(friend.Id, Id);

        // add the other person to our friendslist
        await friendHandler.AddFriend(Id, friend.Id);

        // add us to their friends list
        await friendHandler.AddFriend(friend.Id, Id);

        // remove them from our request list
        await friendHandler.RemoveRequest(Id, friend.Id);

        RemoveFromTopLevelList();

        // remove them from the list
        TopLevel.FriendRequests.Remove(friend);

        ShowSpinner = -1;
        BlockInput = false;

        // notify our parent component that we have changed and it should re-draw the request list
        TopLevel.StateHasChanged?.Invoke();
    }

    private async Task IgnoreRequest()
    {
        if (BlockInput)
        {
            return;
        }
        BlockInput = true;
        ShowSpinner = 1;

        await Wait();

        // remove their encryption key bundle from our bundle list since we aren't going to use it
        await bundleHandler.RemoveBundle(Id, friend.Id);

        // remove them from our request list
        await friendHandler.RemoveRequest(Id, friend.Id);

        RemoveFromTopLevelList();

        // remove them from the list
        TopLevel.FriendRequests.Remove(friend);

        ShowSpinner = -1;
        BlockInput = false;

        // notify our parent component that we have changed and it should re-draw the request list
        TopLevel.StateHasChanged?.Invoke();
    }

    private async Task BlockRequest()
    {
        if (BlockInput)
        {
            return;
        }

        BlockInput = true;
        ShowSpinner = 2;

        await Wait();

        // remove their encryption key bundle from our bundle list since we aren't going to use it
        await bundleHandler.RemoveBundle(Id, friend.Id);

        await friendHandler.BlockFriend(Id, friend.Id);

        // remove them from our request list
        await friendHandler.RemoveRequest(Id, friend.Id);

        RemoveFromTopLevelList();

        // remove them from the list
        TopLevel.FriendRequests.Remove(friend);

        ShowSpinner = -1;
        BlockInput = false;

        // notify our parent component that we have changed and it should re-draw the request list
        TopLevel.StateHasChanged?.Invoke();
    }
}