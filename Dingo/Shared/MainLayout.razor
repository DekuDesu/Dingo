@inherits LayoutComponentBase

@inject ILogger<MainLayout> logger

@inject IDisplayNameHandler nameHandler
@inject IStatusHandler statusHandler
@inject IFriendHandler friendHandler
@inject IMessageHandler messageHandler

@inject ILogger<TopLevelObjects> topLevelLogger

@inject IAsyncTimer Timer

@implements IDisposable

@using DingoDataAccess.Models.Friends
@using DingoDataAccess.Timers
@using System.Threading

<CascadingValue Value=@TopLevel Name=@nameof(TopLevel)>
    <CascadingValue Value=@Id Name=@nameof(Id)>
        <CascadingValue Value=@DisplayName Name=@nameof(DisplayName)>
            <CascadingValue Value=@MyFriendInfo Name=@nameof(MyFriendInfo)>
                <div class="sidebar">
                    <NavMenu />
                </div>
                <div class="main">
                    <div class="content px-4">
                        @Body
                    </div>
                </div>
                <Dingo.Pages.Components.Toasts />
                <Dingo.Pages.Components.Modals />
                <Dingo.Pages.Account.ChangeAvatar />
                <Dingo.Pages.Account.ChangeUsername />
            </CascadingValue>
        </CascadingValue>
    </CascadingValue>
</CascadingValue>

@code{
    [Parameter]
    public string Id { get; set; }

    [Parameter]
    public string DisplayName { get; set; }

    [Parameter]
    public IFriendModel MyFriendInfo { get; set; }

    public TopLevelObjects TopLevel;

    ManualResetEvent DeadmansLock = new(false);

    object timerLock = new();

    [CascadingParameter]
    protected Task<AuthenticationState> AuthStat { get; set; }

    protected override async Task OnInitializedAsync()
    {
        TopLevel = new();

        // only get the id and name if its not passed a param as a component
        // this helps reduce the # of requests to the DB
        // check to see if we need to get the display and id to change the name
        if (AuthStat != null)
        {
            // the the users Id, DisplayName, and MyFriendInfo
            await GetUserFriendModel();

            // mark the user as online
            await SetOnline();
        }

        // Assign the state action that should be invoked whenever a component modifies TopLevel properties OR when recurring timers invoke
        TopLevel.StateHasChanged = () => InvokeAsync(() => TopLevelStateChange());

        // Setup the reccurring timers that check for messages, friend requests ect..
        SetupTimers();

        // Setup the event that should set the user to offline when they leave the page
        TopLevel.BeforeDispose += SetOffline;

        await base.OnInitializedAsync();
    }

    private void SetOffline()
    {
        statusHandler.SetStatus(Id, DingoDataAccess.Enums.OnlineStatus.Offline).Wait();
    }

    private async Task SetOnline()
    {
        /*
        there are 3 types of statuses
            Status
                Either 0 (offline) or 1 (online)
                should never be shown to users

            Virtual Status
                can be any enum for online status except 0 (offline), 0 wont break anything but we have invisible so use that instead
                is the ONLY status that should be shown to users

            Last Virtual Status
                deprecated
        */

        // set the status of the user to online
        await statusHandler.SetStatus(Id, DingoDataAccess.Enums.OnlineStatus.Online);

        if (MyFriendInfo != null)
        {
            MyFriendInfo.Status = DingoDataAccess.Enums.OnlineStatus.Online;
        }
    }

    private async Task GetUserFriendModel()
    {
        // get the auth state from the cascaded param
        var auth = await AuthStat;

        // get the id, it's okay if its null
        Id = auth?.User?.Claims?.FirstOrDefault()?.Value;

        // Get the profile info for the user
        MyFriendInfo = await friendHandler.GetFriend(Id);

        // set the display name
        DisplayName = MyFriendInfo?.DisplayName ?? "";
    }

    private void TopLevelStateChange()
    {
        StateHasChanged();
    }

    /// <summary>
    /// Sets up all the timers that should run periodically for this user
    /// </summary>
    /// <returns></returns>
    private void SetupTimers()
    {
        // make sure to set the override so when the user manually navigates to the request component they can force a refresh without having to wait
        TopLevel.GetFriendRequests = GetFriendRequests;

        // make sure other objects can force-check for friends
        TopLevel.GetFriends = GetFriends;

        // make sure to allow components the ability to force refresh the waiting messages
        TopLevel.GetMessages = GetWaitingMessages;

        // set up the timer that actually checks for updates for everything

        // make sure the timer does not continue to run if it's callback is not invoked
        Timer.AutoReset = false;

        // set how long in-between checks the timer invokes the callback
        Timer.Interval = 5_000;

        // define the callback
        async void RecurringTimers()
        {
            // check for updates
            await GetFriendRequests();
            await GetFriends();
            await GetWaitingMessages();

            // mark us as online
            await SetOnline();

            // update UI
            TopLevel?.StateHasChanged?.Invoke();
            // start another timer
            Timer.Start();
        }

        // assign the callback
        Timer.Elapsed(RecurringTimers);


        // assign the locks for the timer, these ensure after this object is disposed those timers can neither invoke their callbacks
        // or continue invoking their elapsed events
        Timer.TimerLock = timerLock;
        Timer.DeadmansLock = DeadmansLock;

        // start the timer
        Timer.Start();
    }

    /// <summary>
    /// retrieves waiting friend requests from server and sends a toast notification when they arrive
    /// </summary>
    /// <returns></returns>
    private async Task GetFriendRequests()
    {
        var newRequests = await friendHandler.GetRequests(Id);

        bool changed = false;

        foreach (var item in newRequests)
        {
            // if we already sent a notification this session we shouldn't send another toast
            if (TopLevel.AlreadyPushedRequestIds.Contains(item.Id) is false)
            {
                // since the id wasn't in the list that contains the already pushed toasts send a toast
                TopLevel.toasts.Add(new Data.GeneralModels.ToastModel()
                {
                    Content = $"{item.DisplayName}#{item.UniqueIdentifier} sent you a friend request.",
                    Title = $"Friend Request",
                    Timeout = TimeSpan.FromSeconds(20)
                });

                // add the id to the list so we dont send more toasts about the same notification
                TopLevel.AlreadyPushedRequestIds.Add(item.Id);

                // mark the list as changed so we can push another render to the UI
                changed = true;
            }
        }

        if (changed)
        {
            // since the list changed add it
            TopLevel.FriendRequests = newRequests;
        }

        // the UI is automatically updated when this function is called from the TopLevel
    }

    /// <summary>
    /// Retrieves the friends that the current user has added to their friendlist from the server
    /// </summary>
    /// <returns></returns>
    private async Task GetFriends()
    {
        TopLevel.Friends = await friendHandler.GetFriendList(Id);
    }

    /// <summary>
    /// Retrieves unread messages from server and sends notifications when they are received and adds their buttons into the nav bar
    /// </summary>
    /// <returns></returns>
    private async Task GetWaitingMessages()
    {
        // get the list of actual messages that have been sent to me
        List<IMessageModel> waitingMessages = await messageHandler.GetMessages(Id);

        // if there are none then do nothing
        if (waitingMessages?.Count is null or 0)
        {
            // if there are no waiting messages then we can clear the lists that hold information that prevents us of pushing notifications

            // allow us to send notifications
            await TopLevel.AlreadyPushedMessageIds.Clear();

            // allow us to remove notifications
            TopLevel.Messages.Clear();

            return;
        }

        async Task SendNotification(string Id, DateTime sent, int numberOfMessages)
        {

            // send the notificaiton to the user
            var friend = await friendHandler.GetFriend(Id);

            // add the friend the the message list so they're information is displayed in the nav bar
            if (await TopLevel.AlreadyPushedMessageIds.Contains(Id) is false)
            {
                TopLevel.Messages.Add(friend);
            }

            // set the number of messages
            await TopLevel.AlreadyPushedMessageIds.Add(Id, numberOfMessages);

            // send a toast the the user to notifiy them of the incoming message
            TopLevel.toasts.Add(new Data.GeneralModels.ToastModel()
            {
                Content = $"{friend.DisplayName}#{friend.UniqueIdentifier} sent you a message.",
                Title = $"New Message",
                Timeout = TimeSpan.FromSeconds(10),
                TimeSent = sent
            });
        }

        foreach (var item in waitingMessages)
        {
            // get the number of times the person has messaged the user
            int numberOfMessagesFromThisItem = waitingMessages.Where(x => x.SenderId == item.SenderId).Count();

            // check to see if we have already sent a notification for this person, and if we have check to see how many messages the person has sent, if they have sent additional messages we should still notify the user
            if (await TopLevel.AlreadyPushedMessageIds.Contains(item.SenderId))
            {
                if (numberOfMessagesFromThisItem > TopLevel.AlreadyPushedMessageIds[item.SenderId])
                {
                    await SendNotification(item.SenderId, item.TimeSent, numberOfMessagesFromThisItem);
                }
            }
            else
            {
                // since we have no sent a notification yet send the user a notification and store the number of messages sent and the id so we dont send any more notifications unless the person sends another message
                await SendNotification(item.SenderId, item.TimeSent, numberOfMessagesFromThisItem);
            }
        }
    }

    public void Dispose()
    {
        DeadmansLock?.Set();

        TopLevel?.Dispose();

        Timer?.Stop();
        Timer?.Dispose();

        Timer = null;
        TopLevel = null;
    }
}