@using System.Diagnostics
@using System.Timers

@using DingoDataAccess.Models.Friends
@using DingoDataAccess.Enums

@inject ILogger<NavMenu> logger
@implements IDisposable
@inject IStatusHandler statusHandler

<div class="top-row pl-4 navbar navbar-dark">
    <a class="navbar-brand mx-4" href="" @onclick=ResetMessageCallbackReference>
        <img src="/Images/Dingo256.png" class="" height="50" width="50" /> Dingo
    </a>
    <button class="navbar-toggler" @onclick="ToggleNavMenu">
        <span class="navbar-toggler-icon"></span>
    </button>
</div>

<style>
    .dropdown-item {
        color: black;
    }
</style>

<div class="@NavMenuCssClass">
    <ul class="nav flex-column">
        <AuthorizeView>
            <NotAuthorized>
                <li class="nav-item px-3">
                    <a href="Identity/Account/Login" class="btn btn-primary">
                        <span class="oi oi-account-login" title="account login" aria-hidden="true"></span>
                        Login
                    </a>
                </li>
                <li class="nav-item px-3">
                    <a href="Identity/Account/Register" class="btn btn-success">
                        <span class="oi oi-person" title="account login" aria-hidden="true"></span>
                        Create Account
                    </a>
                </li>
            </NotAuthorized>
            <Authorized>
                <li class="nav-item px-3 my-2 align-self-center" style="text-align: center; max-width: 500px;">
                    <div class="">
                        <img class="col-4 rounded-circle w-50 h-50 mx-auto d-block" src=@(MyFriendInfo?.AvatarPath ?? "/Images/DefaultAvatar.png") />
                    </div>
                    <div class="">
                        <span class="text-wrap" style="max-width: 250px; color: white; font-weight:bold; font-size: large;">@(DisplayName ?? "Loading")</span>
                        <span style="color: grey; font-size: 1em; font-weight: bold;">
                            #@(MyFriendInfo?.UniqueIdentifier.ToString() ?? "Loading")
                        </span>
                    </div>
                    <div class="input-group flex-grow-1 my-2">
                        <a class="flex-grow-1" href="/Identity/Account/Logout" title="Logout" style="text-decoration: none;">
                            <span class="oi oi-account-logout mx-auto" aria-hidden="true"></span>
                        </a>
                        <a class="flex-grow-1" href="/Identity/Account/Manage" title="Manage Account" style="text-decoration: none;">
                            <span class="oi oi-cog mx-auto" aria-hidden="true"></span>
                        </a>
                    </div>
                    <div class="row">
                        <Dingo.Pages.Account.StatusDropDown />
                    </div>
                </li>
                <li class="nav-item px-3">
                    <div class="w-100" style="color: white; font-weight: bold; font-size: large;">
                        Messages
                    </div>
                </li>
                <Dingo.Pages.Messaging.NavMessages />
            </Authorized>

        </AuthorizeView>
    </ul>
</div>

@code {
    [CascadingParameter(Name = "Id")]
    public string Id { get; set; }

    [CascadingParameter(Name = "DisplayName")]
    public string DisplayName { get; set; }

    [CascadingParameter(Name = "MyFriendInfo")]
    public IFriendModel MyFriendInfo { get; set; }

    [CascadingParameter(Name = "messageCallbackReference")]
    protected MessageCallbackReference messageCallbackReference { get; set; }

    private bool collapseNavMenu = true;

    private string NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        logger.LogInformation("Initialized Component {ComponentName} Params: {Param1}:{Param1Value} {Param2}:{Param2Value} {Param3}:{Param3Value}", nameof(NavMenu), nameof(Id), Id, nameof(DisplayName), DisplayName, nameof(MyFriendInfo), MyFriendInfo);

        // attack a callback to the message call back, this make it so when we view a message it hides the nav menu
        messageCallbackReference.Callback += HideNavMenu;
    }

    private async Task ResetMessageCallbackReference()
    {
        messageCallbackReference.FriendId = string.Empty;

        collapseNavMenu = true;

        await messageCallbackReference.Callback?.Invoke();
    }

    private async Task HideNavMenu()
    {
        collapseNavMenu = true;

        await InvokeAsync(() => StateHasChanged());
    }

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    public void Dispose()
    {
        // make it so when the user closes the tab and the nav menu is disposed log them out
        statusHandler.SetVirtualStatus(Id, OnlineStatus.Offline);
        statusHandler.SetStatus(Id, OnlineStatus.Offline);
    }
}
