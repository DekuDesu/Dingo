@using System.Diagnostics
@using System.Timers

@using DingoDataAccess.Models.Friends
@using DingoDataAccess.Enums

@inject ILogger<NavMenu> logger
@implements IDisposable
@inject IStatusHandler statusHandler

<div class="top-row pl-4 navbar navbar-dark">
    <a class="navbar-brand mx-4" href="" @onclick="HideChat">
        <img src="/Images/Dingo256.webp" class="" height="50" width="50" /> Dingo
    </a>
    <button class="navbar-toggler" @onclick="ToggleNavMenu">
        <span class="navbar-toggler-icon"></span>
    </button>
</div>

<style>
    .dropdown-item {
        color: black;
    }
</style>

<div class="@NavMenuCssClass">
    <ul class="nav flex-column">
        <AuthorizeView>
            <NotAuthorized>
                <li class="nav-item px-3">
                    <a href="Identity/Account/Login" class="btn btn-primary">
                        <span class="oi oi-account-login" title="account login" aria-hidden="true"></span>
                        Login
                    </a>
                </li>
                <li class="nav-item px-3">
                    <a href="Identity/Account/Register" class="btn btn-success">
                        <span class="oi oi-person" title="account login" aria-hidden="true"></span>
                        Create Account
                    </a>
                </li>
            </NotAuthorized>
            <Authorized>
                <li class="nav-item px-3 my-2 align-self-center w-100" style="text-align: center; max-width: 500px;">
                    <Dingo.Pages.Account.Avatar />
                    <div class="">
                        <span class="oi oi-pencil py-1 d-none d-md-inline mx-1" style="color: white;cursor:pointer;" @onclick=@ShowEditDisplayName></span>
                        <span class="text-wrap" style="max-width: 250px; color: white; font-weight:bold; font-size: large;">
                            @MyFriendInfo?.DisplayName
                        </span>
                        <span style="color: grey; font-size: 1em; font-weight: bold;">
                            #@(MyFriendInfo?.UniqueIdentifier.ToString() ?? "Loading")
                        </span>
                    </div>

                    <Dingo.Pages.Account.NavButtons />

                    <div class="row">
                        <Dingo.Pages.Account.StatusDropDown />
                    </div>
                </li>
                <li class="nav-item px-3">
                    <div class="w-100" style="color: white; font-weight: bold; font-size: large;">
                        Messages
                    </div>
                </li>
                <Dingo.Pages.Messaging.NavMessages />
            </Authorized>

        </AuthorizeView>
    </ul>
</div>

@code {
    [CascadingParameter(Name = "Id")]
    public string Id { get; set; }

    [CascadingParameter(Name = "DisplayName")]
    public string DisplayName { get; set; }

    [CascadingParameter(Name = "MyFriendInfo")]
    public IFriendModel MyFriendInfo { get; set; }

    [CascadingParameter(Name = nameof(TopLevel))]
    public TopLevelObjects TopLevel { get; set; }

    private bool collapseNavMenu = true;

    private string NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    private void HideChat()
    {

        collapseNavMenu = true;

        if (TopLevel != null)
        {
            TopLevel.CurrentChatId = null;
            TopLevel.ShowChatInterface = false;
            TopLevel.StateHasChanged();
        }
    }

    private async Task HideNavMenu()
    {
        collapseNavMenu = true;

        await InvokeAsync(() => StateHasChanged());
    }

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    private void ShowEditDisplayName()
    {
        TopLevel.ShowChangeDisplayName = true;
        TopLevel.StateHasChanged();
    }

    public void Dispose()
    {
        // make it so when the user closes the tab and the nav menu is disposed log them out
        statusHandler.SetVirtualStatus(Id, OnlineStatus.Offline);
        statusHandler.SetStatus(Id, OnlineStatus.Offline);
    }
}
